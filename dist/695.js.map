{"version":3,"file":"695.js","mappings":"4PAaA,QATiB,SAAIA,GACnB,I,IAAA,G,GAA0BC,EAAAA,EAAAA,UAASD,G,EAAnC,E,8zBAAOE,EAAP,KAAcC,EAAd,KAKA,MAAO,CAACD,GAJQE,EAAAA,EAAAA,cACd,SAACC,GAAD,OAAsCF,EAASE,EAAEC,OAAOJ,SACxD,IAEsBC,K,+kCC6E1B,QArEc,WACZ,OAAgCI,EAAAA,EAAAA,IAAO,aAAcC,EAAAA,EAAS,IAAtDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,OAGrB,KAAoCV,EAAAA,EAAAA,WAAS,GAA7C,GAAOW,EAAP,KAAmBC,EAAnB,KACA,KAA+BC,EAAAA,EAAAA,GAAS,IAAxC,GAAOC,EAAP,KAAcC,EAAd,KACA,KAAqCF,EAAAA,EAAAA,GAAS,IAA9C,GAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAWf,EAAAA,EAAAA,cACf,SAACC,GACCA,EAAEe,iBACFP,GAAc,GACdQ,IAAAA,KACQ,mBAAoB,CAAEN,MAAAA,EAAOE,SAAAA,GAAY,CAAEK,iBAAiB,IACjEC,MAAK,SAACC,GACLb,EAAOa,EAASf,MAAM,MAEvBgB,OAAM,SAACf,GAAU,QAChBG,EAAmD,OAArC,UAAAH,EAAMc,gBAAN,mBAAgBf,YAAhB,eAAsBiB,kBAG1C,CAACX,EAAOE,EAAUN,IAGpB,YAAagB,IAATlB,EACK,sCAGJC,GAASD,GACZmB,QAAQC,IAAI,MAAOpB,GAEjB,gBAAC,KAAD,KACE,gBAAC,KAAD,CAAOqB,KAAK,KAAKC,QAAS,gBAAC,KAAD,CAAUC,SAAO,EAACC,GAAG,qCAMnD,uBAAKC,GAAG,aACN,gBAAC,KAAD,eACA,gBAAC,KAAD,CAAMf,SAAUA,GACd,gBAAC,KAAD,CAAOe,GAAG,eACR,sCACA,2BACE,gBAAC,KAAD,CAAOC,KAAK,QAAQD,GAAG,QAAQE,KAAK,QAAQlC,MAAOa,EAAOsB,SAAUrB,MAGxE,gBAAC,KAAD,CAAOkB,GAAG,kBACR,oCACA,2BACE,gBAAC,KAAD,CACEC,KAAK,WACLD,GAAG,WACHE,KAAK,WACLlC,MAAOe,EACPoB,SAAUnB,KAGbN,GAAc,gBAAC,KAAD,kCAEjB,gBAAC,KAAD,CAAQuB,KAAK,UAAb,QAEF,gBAAC,KAAD,sBAEE,gBAAC,KAAD,CAAMF,GAAG,WAAT,iB,kPC/ED,IAAMK,EAASC,EAAAA,EAAAA,OAAH,iRAWNC,EAAOD,EAAAA,EAAAA,KAAH,2EAMJE,EAAQF,EAAAA,EAAAA,MAAH,oOAaLG,EAAQH,EAAAA,EAAAA,MAAH,krBAsBLI,EAASJ,EAAAA,EAAAA,OAAH,8nBA4BNK,EAAQL,EAAAA,EAAAA,IAAH,kFAMLM,EAAUN,EAAAA,EAAAA,IAAH,2DAKPO,EAAgBP,EAAAA,EAAAA,EAAH,sQ,wDCpF1B,QAPgB,SAAOQ,GAAP,OACd1B,IAAAA,IACa0B,EAAK,CACdzB,iBAAiB,IAElBC,MAAK,SAACC,GAAD,OAAcA,EAASf","sources":["webpack://sleact-ts-front/./hooks/useInput.ts","webpack://sleact-ts-front/./pages/LogIn/index.tsx","webpack://sleact-ts-front/./pages/SignUp/styles.tsx","webpack://sleact-ts-front/./utils/fetcher.ts"],"sourcesContent":["import { ChangeEvent, Dispatch, SetStateAction, useCallback, useState } from \"react\";\r\n\r\ntype ReturnTypes<T> = [T, (e: ChangeEvent<HTMLInputElement>) => void, Dispatch<SetStateAction<T>>];\r\n\r\nconst useInput = <T>(initialData: T): ReturnTypes<T> => {\r\n  const [value, setValue] = useState(initialData);\r\n  const handler = useCallback(\r\n    (e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value as unknown as T),\r\n    [],\r\n  );\r\n  return [value, handler, setValue];\r\n};\r\n\r\nexport default useInput;\r\n","import useInput from \"@hooks/useInput\";\r\nimport Channel from \"@pages/Channel\";\r\nimport {\r\n  Success,\r\n  Form,\r\n  Error,\r\n  Label,\r\n  Input,\r\n  LinkContainer,\r\n  Button,\r\n  Header,\r\n} from \"@pages/SignUp/styles\";\r\nimport fetcher from \"@utils/fetcher\";\r\nimport axios from \"axios\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { Link, Navigate, Route, Routes } from \"react-router-dom\";\r\nimport useSWR from \"swr\";\r\n\r\nconst LogIn = () => {\r\n  const { data, error, mutate } = useSWR(\"/api/users\", fetcher, {\r\n    // dedupingInterval: 10000,\r\n  });\r\n  const [logInError, setLogInError] = useState(false);\r\n  const [email, onChangeEmail] = useInput(\"\");\r\n  const [password, onChangePassword] = useInput(\"\");\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      setLogInError(false);\r\n      axios\r\n        .post(\"/api/users/login\", { email, password }, { withCredentials: true })\r\n        .then((response) => {\r\n          mutate(response.data, false);\r\n        })\r\n        .catch((error) => {\r\n          setLogInError(error.response?.data?.statusCode === 401);\r\n        });\r\n    },\r\n    [email, password, mutate],\r\n  );\r\n\r\n  if (data === undefined) {\r\n    return <div>로딩중...</div>;\r\n  }\r\n\r\n  if (!error && data) {\r\n    console.log(\"로그인\", data);\r\n    return (\r\n      <Routes>\r\n        <Route path=\"/*\" element={<Navigate replace to=\"/workspace/Sleact/channel/일반\" />} />\r\n      </Routes>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div id=\"container\">\r\n      <Header>Sleact</Header>\r\n      <Form onSubmit={onSubmit}>\r\n        <Label id=\"email-label\">\r\n          <span>이메일 주소</span>\r\n          <div>\r\n            <Input type=\"email\" id=\"email\" name=\"email\" value={email} onChange={onChangeEmail} />\r\n          </div>\r\n        </Label>\r\n        <Label id=\"password-label\">\r\n          <span>비밀번호</span>\r\n          <div>\r\n            <Input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={onChangePassword}\r\n            />\r\n          </div>\r\n          {logInError && <Error>이메일과 비밀번호 조합이 일치하지 않습니다.</Error>}\r\n        </Label>\r\n        <Button type=\"submit\">로그인</Button>\r\n      </Form>\r\n      <LinkContainer>\r\n        아직 회원이 아니신가요?&nbsp;\r\n        <Link to=\"/signup\">회원가입 하러가기</Link>\r\n      </LinkContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogIn;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Header = styled.header`\r\n  text-align: center;\r\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\r\n  font-weight: 700;\r\n  font-size: 48px;\r\n  line-height: 46px;\r\n  letter-spacing: -0.75px;\r\n  margin-top: 50px;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  margin: 0 auto;\r\n  width: 400px;\r\n  max-width: 400px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 16px;\r\n  & > span {\r\n    display: block;\r\n    text-align: left;\r\n    padding-bottom: 8px;\r\n    font-size: 15px;\r\n    cursor: pointer;\r\n    line-height: 1.46666667;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  border-radius: 4px;\r\n  --saf-0: rgba(var(--sk_foreground_high_solid, 134, 134, 134), 1);\r\n  border: 1px solid var(--saf-0);\r\n  transition: border 80ms ease-out, box-shadow 80ms ease-out;\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px;\r\n  width: 100%;\r\n  color: rgba(var(--sk_primary_foreground, 29, 28, 29), 1);\r\n  background-color: rgba(var(--sk_primary_background, 255, 255, 255), 1);\r\n  padding: 12px;\r\n  height: 44px;\r\n  padding-top: 11px;\r\n  padding-bottom: 13px;\r\n  font-size: 18px;\r\n  line-height: 1.33333333;\r\n  &:focus {\r\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin-bottom: 12px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  color: #fff;\r\n  background-color: #4a154b;\r\n  border: none;\r\n  font-size: 18px;\r\n  font-weight: 900;\r\n  height: 44px;\r\n  min-width: 96px;\r\n  padding: 0 16px 3px;\r\n  transition: all 80ms linear;\r\n  user-select: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\r\n  &:hover {\r\n    background-color: rgba(74, 21, 75, 0.9);\r\n    border: none;\r\n  }\r\n  &:focus {\r\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\r\n  }\r\n`;\r\n\r\nexport const Error = styled.div`\r\n  color: #e01e5a;\r\n  margin: 8px 0 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const Success = styled.div`\r\n  color: #2eb67d;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const LinkContainer = styled.p`\r\n  font-size: 13px;\r\n  color: #616061;\r\n  margin: 0 auto 8px;\r\n  width: 400px;\r\n  max-width: 400px;\r\n  & a {\r\n    color: #1264a3;\r\n    text-decoration: none;\r\n    font-weight: 700;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;","import axios from \"axios\";\r\n\r\nconst fetcher = <Data>(url: string) =>\r\n  axios\r\n    .get<Data>(url, {\r\n      withCredentials: true,\r\n    })\r\n    .then((response) => response.data);\r\n\r\nexport default fetcher;\r\n"],"names":["initialData","useState","value","setValue","useCallback","e","target","useSWR","fetcher","data","error","mutate","logInError","setLogInError","useInput","email","onChangeEmail","password","onChangePassword","onSubmit","preventDefault","axios","withCredentials","then","response","catch","statusCode","undefined","console","log","path","element","replace","to","id","type","name","onChange","Header","styled","Form","Label","Input","Button","Error","Success","LinkContainer","url"],"sourceRoot":""}